- Adding missing usings.

- Extract interfaces in new namespace "contracts".

- Extract new class PropertyValue from ObjectToUrl class.

- Adding XML Documentation.

- Renamed all fields starting with an underscore

- Moved all private methods after public methods and non-static methods after static methods

- Arranged usings alphabethically

- Removed empty lines and added empty lines where necessary

- Implemented Dependency inversion principle in HTTP Client.
BEFORE
-------------------------------------------------------------------------------------------------
 public HttpClient(IEncoderDecoderConfiguration encoderDecoderConfiguration)
        {
            this._encoder = encoderDecoderConfiguration.GetEncoder();
            this._decoder = encoderDecoderConfiguration.GetDecoder();
            this._uriComposer = new UriComposer();

            this.Request = new HttpRequest(this._encoder);
        }
-------------------------------------------------------------------------------------------------

AFTER
-------------------------------------------------------------------------------------------------
public HttpClient(IEncoderDecoderConfiguration encoderDecoderConfiguration, IUriComposer composer)
        {
            this._encoder = encoderDecoderConfiguration.GetEncoder();
            this._decoder = encoderDecoderConfiguration.GetDecoder();
            this._uriComposer = composer;

            this.Request = new HttpRequest(this._encoder);
        }
-------------------------------------------------------------------------------------------------
We add new parameter in constructor and that way the class becomes independent from the UriComposer class. 

- Extracted IUriComposer from URI composer. That way we follow the LSP.

- Fix Bugs in ObjectToUrl class- ParameterToUrl method.

BEFORE
-------------------------------------------------------------------------------------------------
 public string ParametersToUrl(object parameters)
        {
            var returnUri = string.Empty;
            var properties = GetProperties(parameters);
            if (parameters != null)
            {
                var paramsList = properties.Select(this.BuildParam).ToList();
                if (paramsList.Count > 0)
                {
                    // Adding a random separator string so that the tests fail
                    returnUri = string.Format("{0}{1}", this.PathStartCharacter, string.Join(this.PathSeparatorCharacter + "|", paramsList));
                }
            }

            return returnUri;
        }

AFTER
-------------------------------------------------------------------------------------------------
 returnUri = string.Format("{0}{1}", this.PathStartCharacter, string.Join(this.PathSeparatorCharacter, paramsList));